#version 460

layout (local_size_x = 16, local_size_y = 17) in;

layout( push_constant ) uniform constants
{	
	vec2 srcResolution;
	float filterRadius;
	int finalPass;
} pcs;

layout(set = 0, binding = 0) uniform sampler2D srcTexture;
layout(rgba16f, set = 0, binding = 1) uniform image2D dstImage;

void main()
{
  ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(dstImage);

  if (texelCoord.x < size.x && texelCoord.y < size.y)
  {

    vec2 texCoord = vec2(float(texelCoord.x) / float(size.x), float(texelCoord.y) / float(size.y));
    
    float x = pcs.filterRadius;
    float y = pcs.filterRadius;
    
    vec3 a = texture(srcTexture, vec2(texCoord.x - x, texCoord.y + y)).rgb;
    vec3 b = texture(srcTexture, vec2(texCoord.x,     texCoord.y + y)).rgb;
    vec3 c = texture(srcTexture, vec2(texCoord.x + x, texCoord.y + y)).rgb;

    vec3 d = texture(srcTexture, vec2(texCoord.x - x, texCoord.y)).rgb;
    vec3 e = texture(srcTexture, vec2(texCoord.x,     texCoord.y)).rgb;
    vec3 f = texture(srcTexture, vec2(texCoord.x + x, texCoord.y)).rgb;

    vec3 g = texture(srcTexture, vec2(texCoord.x - x, texCoord.y - y)).rgb;
    vec3 h = texture(srcTexture, vec2(texCoord.x,     texCoord.y - y)).rgb;
    vec3 i = texture(srcTexture, vec2(texCoord.x + x, texCoord.y - y)).rgb;
    
    vec3 upsample;
    upsample = e*4.0;
    upsample += (b+d+f+h)*2.0;
    upsample += (a+c+g+i);
    upsample *= 1.0 / 16.0;
    
    vec4 color = imageLoad(dstImage, texelCoord);
    
    //FIXME: wh not mix color from small into big?? u downsample using big 
    if (pcs.finalPass == 1)
    {
      imageStore(dstImage, texelCoord, vec4(upsample, 1.0)*0.04 + color*0.96);
    }
    else
    {
      imageStore(dstImage, texelCoord, vec4(upsample, 1.0));
    }
    //imageStore(dstImage, texelCoord, color);
  }
}
