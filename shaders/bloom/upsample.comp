#version 460

layout (local_size_x = 16, local_size_y = 17) in;

layout( push_constant ) uniform constants
{	
	vec2 srcResolution;
	float filterRadius;
	int finalPass;
} pcs;

layout(set = 0, binding = 0) uniform sampler2D srcTexture;
layout(rgba16f, set = 0, binding = 1) uniform image2D dstImage;


/* ACES TONEMAPPER TEMP */
vec3[3] aces_input_matrix =
{
    vec3(0.59719f, 0.35458f, 0.04823f),
    vec3(0.07600f, 0.90834f, 0.01566f),
    vec3(0.02840f, 0.13383f, 0.83777f)
};

vec3[3] aces_output_matrix =
{
    vec3( 1.60475f, -0.53108f, -0.07367f),
    vec3(-0.10208f,  1.10813f, -0.00605f),
    vec3(-0.00327f, -0.07276f,  1.07602f)
};

vec3 mul(vec3[3] m, vec3 v)
{
    float x = m[0][0] * v[0] + m[0][1] * v[1] + m[0][2] * v[2];
    float y = m[1][0] * v[0] + m[1][1] * v[1] + m[1][2] * v[2];
    float z = m[2][0] * v[0] + m[2][1] * v[1] + m[2][2] * v[2];
    return vec3(x, y, z);
}

vec3 rtt_and_odt_fit(vec3 v)
{
    vec3 a = v * (v + 0.0245786f) - 0.000090537f;
    vec3 b = v * (0.983729f * v + 0.4329510f) + 0.238081f;
    return a / b;
}

vec3 aces_fitted(vec3 v)
{
    v = mul(aces_input_matrix, v);
    v = rtt_and_odt_fit(v);
    return mul(aces_output_matrix, v);
}

/*ACES TONEMAPPER END */

void main()
{
  ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(dstImage);

  if (texelCoord.x < size.x && texelCoord.y < size.y)
  {

    vec2 texCoord = vec2((float(texelCoord.x) + 0.5) / float(size.x), (float(texelCoord.y) + 0.5) / float(size.y));
    
    float x = pcs.filterRadius;
    float y = pcs.filterRadius;
    
    vec3 a = texture(srcTexture, vec2(texCoord.x - x, texCoord.y + y)).rgb;
    vec3 b = texture(srcTexture, vec2(texCoord.x,     texCoord.y + y)).rgb;
    vec3 c = texture(srcTexture, vec2(texCoord.x + x, texCoord.y + y)).rgb;

    vec3 d = texture(srcTexture, vec2(texCoord.x - x, texCoord.y)).rgb;
    vec3 e = texture(srcTexture, vec2(texCoord.x,     texCoord.y)).rgb;
    vec3 f = texture(srcTexture, vec2(texCoord.x + x, texCoord.y)).rgb;

    vec3 g = texture(srcTexture, vec2(texCoord.x - x, texCoord.y - y)).rgb;
    vec3 h = texture(srcTexture, vec2(texCoord.x,     texCoord.y - y)).rgb;
    vec3 i = texture(srcTexture, vec2(texCoord.x + x, texCoord.y - y)).rgb;
    
    vec3 upsample;
    upsample = e*4.0;
    upsample += (b+d+f+h)*2.0;
    upsample += (a+c+g+i);
    upsample *= 1.0 / 16.0;
    
    vec4 color = imageLoad(dstImage, texelCoord);
    
    if (pcs.finalPass == 1)
    {
      vec4 final = mix(color, vec4(upsample, 1.0), 0.04);
      vec4 f = vec4(aces_fitted(final.xyz), final.w);
      imageStore(dstImage, texelCoord, f);
      return; 
    }
    imageStore(dstImage, texelCoord, color + vec4(upsample, 1.0));
  }
}
