#version 460

layout (local_size_x = 16, local_size_y = 17) in;

layout( push_constant ) uniform constants
{	
	vec2 srcResolution;
	float filterRadius;
} pcs;

layout(set = 0, binding = 0) uniform sampler2D srcTexture;
layout(rgba16f, set = 0, binding = 1) uniform image2D dstImage;

void main()
{
  ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(dstImage);

  if (texelCoord.x < size.x && texelCoord.y < size.y)
  {
    vec2 texCoord = vec2(float(texelCoord.x) / float(size.x), float(texelCoord.y) / float(size.y));
    vec2 srcTexelSize = 1.0 / pcs.srcResolution;
    float x = srcTexelSize.x;
    float y = srcTexelSize.y;
    
    vec3 a = texture(srcTexture, vec2(texCoord.x - 2*x, texCoord.y + 2*y)).rgb;
    vec3 b = texture(srcTexture, vec2(texCoord.x,       texCoord.y + 2*y)).rgb;
    vec3 c = texture(srcTexture, vec2(texCoord.x + 2*x, texCoord.y + 2*y)).rgb;

    vec3 d = texture(srcTexture, vec2(texCoord.x - 2*x, texCoord.y)).rgb;
    vec3 e = texture(srcTexture, vec2(texCoord.x,       texCoord.y)).rgb;
    vec3 f = texture(srcTexture, vec2(texCoord.x + 2*x, texCoord.y)).rgb;

    vec3 g = texture(srcTexture, vec2(texCoord.x - 2*x, texCoord.y - 2*y)).rgb;
    vec3 h = texture(srcTexture, vec2(texCoord.x,       texCoord.y - 2*y)).rgb;
    vec3 i = texture(srcTexture, vec2(texCoord.x + 2*x, texCoord.y - 2*y)).rgb;

    vec3 j = texture(srcTexture, vec2(texCoord.x - x, texCoord.y + y)).rgb;
    vec3 k = texture(srcTexture, vec2(texCoord.x + x, texCoord.y + y)).rgb;
    vec3 l = texture(srcTexture, vec2(texCoord.x - x, texCoord.y - y)).rgb;
    vec3 m = texture(srcTexture, vec2(texCoord.x + x, texCoord.y - y)).rgb;
    
    vec3 downsample;
    downsample = e*0.125;
    downsample += (a+c+g+i)*0.03125;
    downsample += (b+d+f+h)*0.0625;
    downsample += (j+k+l+m)*0.125;
    
    imageStore(dstImage, texelCoord, vec4(downsample, 1.0));
  }
}
