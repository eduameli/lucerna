#include "common.h"
#include "input_structures.glsl"

struct indirect_cull_pcs
{
#ifdef __cplusplus
    indirect_cull_pcs()
        : view{1.0f}, frustum{1.0f}, ids{0}, draw_count{0} {}
#endif
    mat4_ar view;
    vec4_ar frustum;
    buffer_ar(IndirectDrawBuffer) ids; // FIXME: this should be DrawSetBuffer
    buffer_ar(IndirectCountBuffer) indirect_count;
    buffer_ar(PartialSums) partial;
    buffer_ar(OutputCulling) outb;
    uint32_ar draw_count;
};


#ifndef __cplusplus
layout (local_size_x = 1024) in;
#extension GL_EXT_debug_printf : enable


layout(set = 0, binding = 0, scalar) readonly buffer drawDataBuffer { DrawData draws[]; };
layout(set = 0, binding = 1, scalar) readonly buffer transformBuffer { mat4x3 transforms[]; };
layout(set = 0, binding = 2, scalar) readonly buffer boundsBuffer{ vec4_ar bounds[]; };

layout( push_constant, scalar ) uniform constants
{
  indirect_cull_pcs pcs;
};


shared uint sdata[32];

void main()
{
    if (gl_WorkGroupID.x == 0)
        return;


    // need to do prefix sum on this. 
    if (gl_SubgroupID == 0)
    {
        uint value = pcs.partial.data[gl_SubgroupInvocationID];
        uint prefix = subgroupInclusiveAdd(value);
        debugPrintfEXT("prefix %d", prefix);
        sdata[gl_SubgroupInvocationID] = prefix;
    }

    barrier();
    
    pcs.outb.data[gl_GlobalInvocationID.x] += sdata[gl_WorkGroupID.x];
       
}
#endif
