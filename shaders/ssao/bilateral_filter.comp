#include "common.h"

struct bilateral_filter_pcs
{
  vec2_ar direction; 
};

#ifndef __cplusplus
layout(set = 0, binding = 0) uniform sampler2D inputTexture;
layout(r8, set = 0, binding = 1) uniform image2D outputImage;


layout (local_size_x = 16, local_size_y = 17) in;

void main()
{
  // box blur

  ivec2 texelCoord = ivec2(gl_GlobalInvocationID.xy);
  ivec2 size = imageSize(outputImage); // FIXME: put it in pcs
  
  // TODO: reconstruct depth without inv matrix? more optimised
  if (texelCoord.x < size.x && texelCoord.y < size.y)
  {
    vec2 texCoord = vec2((float(texelCoord.x) + 0.5) / float(size.x), (float(texelCoord.y) + 0.5) / float(size.y));

    vec2 texelSize = 1.0 / size;
    float result = 0.0;

    for (int x = -2; x < 2; ++x) 
    {
        for (int y = -2; y < 2; ++y) 
        {
            vec2 offset = vec2(float(x), float(y)) * texelSize;
            result += texture(inputTexture, texCoord + offset).r;
        }
    }
    result /= 4.0 *  4.0;
    imageStore(outputImage, texelCoord, vec4(result, 0.0, 0.0, 0.0));
  }

}
#endif
